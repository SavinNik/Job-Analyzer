import asyncio
import streamlit as st
import plotly.express as px
import pandas as pd

from api_client import fetch_top_skills, fetch_skills_growth, fetch_avg_salaries, fetch_vacancy_count_trend, \
    fetch_vacancy_count_by_city

st.set_page_config(
    page_title="JobTrends Analyzer",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä JobTrends Analyzer")
st.markdown("–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")


async def load_data(limit, skills_days, vacancy_days):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å API"""
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        try:
            skills, salaries, trends, vacancy_trends, vacancy_count_by_city = await asyncio.gather(
                fetch_top_skills(limit),
                fetch_avg_salaries(),
                fetch_skills_growth(skills_days),
                fetch_vacancy_count_trend(vacancy_days),
                fetch_vacancy_count_by_city()
            )
            return skills, salaries, trends, vacancy_trends, vacancy_count_by_city
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return None, None, None, None, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if 'initialized' not in st.session_state:
    st.session_state.initialized = True
    st.session_state.skills = []
    st.session_state.salaries = []
    st.session_state.trends = []
    st.session_state.vacancy_trends = []
    st.session_state.vacancy_count_by_city = []
    st.session_state.skills_days = 30
    st.session_state.vacancy_days = 30
    st.session_state.limit = 20

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
col1, col2, col3, col4, col5 = st.columns(5)

with col1:
    st.session_state.limit = st.slider("–¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤", 5, 50, st.session_state.limit, key='skills_limit')
with col2:
    st.session_state.skills_days = st.slider(
        "–î–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤",
        7, 180,
        st.session_state.skills_days,
        key='skills_days_slider'
    )
with col3:
    st.write("")
with col4:
    st.session_state.vacancy_days = st.slider(
        "–î–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π",
        7, 180,
        st.session_state.vacancy_days,
        key='vacancy_days_slider'
    )
with col5:
    st.write("")

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ") or not st.session_state.skills:
    with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
        skills, salaries, trends, vacancy_trends, vacancy_count_by_city = asyncio.run(
            load_data(st.session_state.limit, st.session_state.skills_days, st.session_state.vacancy_days)
        )
        
        if skills is not None:
            st.session_state.skills = skills
            st.session_state.salaries = salaries
            st.session_state.trends = trends
            st.session_state.vacancy_trends = vacancy_trends
            st.session_state.vacancy_count_by_city = vacancy_count_by_city
            st.rerun()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
skills = st.session_state.skills
salaries = st.session_state.salaries
trends = st.session_state.trends
vacancy_trends = st.session_state.vacancy_trends
vacancy_count_by_city = st.session_state.vacancy_count_by_city
skills_days = st.session_state.skills_days
vacancy_days = st.session_state.vacancy_days

# –ì—Ä–∞—Ñ–∏–∫ 1: –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤
st.subheader("–¢–æ–ø –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤")
df_skills = pd.DataFrame(skills)
if not df_skills.empty:
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df_skills = df_skills.sort_values('count', ascending=True)
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    fig1 = px.bar(
        df_skills,
        x='count',
        y='skills',
        orientation='h',
        height=600,
        text='count',
        labels={'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π', 'skills': '–ù–∞–≤—ã–∫–∏'}
    )
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
    fig1.update_layout(
        yaxis={'categoryorder': 'total ascending'},
        margin=dict(l=20, r=20, t=40, b=40),
        height=400 + len(df_skills) * 15  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–≤—ã–∫–æ–≤
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö
    fig1.update_traces(
        textposition='outside',
        texttemplate='%{x:.0f}'
    )
    st.plotly_chart(fig1, use_container_width=True)
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö")

# –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –æ–ø—ã—Ç—É
st.subheader("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –æ–ø—ã—Ç—É")
df_salaries = pd.DataFrame(salaries)
if not df_salaries.empty:
    fig2 = px.bar(
        df_salaries,
        x="experience",
        y="avg_salary_rub",
        text="avg_salary_rub",
        labels={"avg_salary_rub": "–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞", "experience": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"},
        height=600
    )
    fig2.update_traces(texttemplate="%{text:.0f} —Ä—É–±.", textposition="outside")
    st.plotly_chart(fig2, use_container_width=True)
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö")

# –ì—Ä–∞—Ñ–∏–∫ 3: –†–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
st.subheader(f"–î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {skills_days} –¥–Ω–µ–π")
if trends and len(trends) > 0:
    df_trends = pd.DataFrame(trends)
    
    # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    df_trends["sort_key"] = df_trends["growth_pct"].replace(float('inf'), 9999)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Ä–æ—Å—Ç, –ø–æ—Ç–æ–º –Ω–æ–≤—ã–µ, –ø–æ—Ç–æ–º –ø–∞–¥–µ–Ω–∏–µ
    df_trends = df_trends.sort_values("sort_key", ascending=False).head(20)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def format_growth(x):
        if x["growth_pct"] == float('inf'):
            return "–Ω–æ–≤—ã–π"
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            value = float(x['growth_pct']) if isinstance(x['growth_pct'], str) else x['growth_pct']
            return f"{value:+.1f}%"
        except (ValueError, TypeError):
            return str(x['growth_pct'])
    
    df_trends["growth_display"] = df_trends.apply(format_growth, axis=1)
    
    # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ None –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df_trends["growth_pct"] = df_trends["growth_pct"].replace(float('inf'), None)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig3 = px.bar(
        df_trends,
        x="growth_pct",
        y="skill",
        orientation="h",
        text="growth_display",
        color="growth_pct",
        color_continuous_scale=["red", "yellow", "green"],
        range_color=[-100, 100],
        labels={"growth_pct": "–†–æ—Å—Ç, %", "skill": "–ù–∞–≤—ã–∫"},
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
    fig3.update_traces(
        textposition="outside",
        textfont_size=12,
        texttemplate='%{text}'
    )
    
    fig3.update_layout(
        height=max(500, len(df_trends) * 25),
        xaxis_title="–†–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏, %",
        yaxis_title="",
        coloraxis_colorbar=dict(
            title="–†–æ—Å—Ç, %",
            tickformat=".1f%"
        )
    )
    
    st.plotly_chart(fig3, use_container_width=True)
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞–≤—ã–∫–æ–≤")


# –ì—Ä–∞—Ñ–∏–∫ 4: –†–æ—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
st.subheader(f"–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ {vacancy_days} –¥–Ω–µ–π")
if vacancy_trends and len(vacancy_trends) > 0:
    df_vacancy_trends = pd.DataFrame(vacancy_trends)
    if not df_vacancy_trends.empty:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        df_vacancy_trends['date'] = pd.to_datetime(df_vacancy_trends['date'])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        df_vacancy_trends = df_vacancy_trends.sort_values('date')

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig4 = px.line(
            df_vacancy_trends,
            x='date',
            y='count',
            title='–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π',
            labels={'date': '–î–∞—Ç–∞', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π'}
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç
        fig4.update_xaxes(
            rangeslider_visible=True,
            rangeselector=dict(
                buttons=list([
                    dict(count=7, label="1 –Ω–µ–¥.", step="day", stepmode="backward"),
                    dict(count=1, label="1 –º–µ—Å.", step="month", stepmode="backward"),
                    dict(count=3, label="3 –º–µ—Å.", step="month", stepmode="backward"),
                    dict(step="all")
                ])
            )
        )

        st.plotly_chart(fig4, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–Ω–∞–º–∏–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π")
else:
    st.warning("–î–∞–Ω–Ω—ã–µ –æ –¥–∏–Ω–∞–º–∏–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –ì—Ä–∞—Ñ–∏–∫ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º
st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º")

if vacancy_count_by_city and len(vacancy_count_by_city) > 0:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if isinstance(vacancy_count_by_city, list) and len(vacancy_count_by_city) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
            first_item = vacancy_count_by_city[0]

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            if 'city' in first_item and 'vacancy_count' in first_item:
                # –§–æ—Ä–º–∞—Ç: [{"city": "–ú–æ—Å–∫–≤–∞", "vacancy_count": 100}, ...]
                df_vacancy_count_by_city = pd.DataFrame([
                    {'city': item['city'], 'count': item['vacancy_count']}
                    for item in vacancy_count_by_city
                ])
            elif 'area_name' in first_item and 'vacancy_count' in first_item:
                # –§–æ—Ä–º–∞—Ç: [{"area_name": "–ú–æ—Å–∫–≤–∞", "vacancy_count": 100}, ...]
                df_vacancy_count_by_city = pd.DataFrame([
                    {'city': item['area_name'], 'count': item['vacancy_count']}
                    for item in vacancy_count_by_city
                ])
            else:
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å DataFrame –∫–∞–∫ –µ—Å—Ç—å
                df_vacancy_count_by_city = pd.DataFrame(vacancy_count_by_city)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                if 'city' not in df_vacancy_count_by_city.columns or 'count' not in df_vacancy_count_by_city.columns:
                    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∏–º–µ—é—Ç –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞
                    if 'area_name' in df_vacancy_count_by_city.columns:
                        df_vacancy_count_by_city = df_vacancy_count_by_city.rename(columns={'area_name': 'city'})
                    if 'vacancy_count' in df_vacancy_count_by_city.columns:
                        df_vacancy_count_by_city = df_vacancy_count_by_city.rename(columns={'vacancy_count': 'count'})
        else:
            df_vacancy_count_by_city = pd.DataFrame()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
        if not df_vacancy_count_by_city.empty and 'city' in df_vacancy_count_by_city.columns and 'count' in df_vacancy_count_by_city.columns:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            df_vacancy_count_by_city = df_vacancy_count_by_city.sort_values('count', ascending=True)

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig5 = px.bar(
                df_vacancy_count_by_city,
                x='count',
                y='city',
                orientation='h',
                text='count',
                labels={'city': '–ì–æ—Ä–æ–¥', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π'},
                title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º'
            )

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
            fig5.update_traces(texttemplate='%{text:,}', textposition='outside')

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Ä–æ–¥–æ–≤
            fig5.update_layout(
                height=max(400, len(df_vacancy_count_by_city) * 25),
                margin=dict(l=10, r=10, t=50, b=10)
            )

            st.plotly_chart(fig5, use_container_width=True)
        else:
            st.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö. –û–∂–∏–¥–∞—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏ 'city' –∏ 'count'.")
            st.json(first_item)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö: {str(e)}")
        st.json(vacancy_count_by_city)  # –í—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º")

